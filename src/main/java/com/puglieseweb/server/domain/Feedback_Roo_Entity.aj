// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.puglieseweb.server.domain;

import com.puglieseweb.server.domain.Feedback;
import java.lang.Integer;
import java.lang.Long;
import java.lang.SuppressWarnings;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Feedback_Roo_Entity {
    
    declare @type: Feedback: @Entity;
    
    @PersistenceContext
    transient EntityManager Feedback.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long Feedback.id;
    
    @Version
    @Column(name = "version")
    private Integer Feedback.version;
    
    public Long Feedback.getId() {
        return this.id;
    }
    
    public void Feedback.setId(Long id) {
        this.id = id;
    }
    
    public Integer Feedback.getVersion() {
        return this.version;
    }
    
    public void Feedback.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void Feedback.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Feedback.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Feedback attached = Feedback.findFeedback(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Feedback.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Feedback.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Feedback Feedback.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Feedback merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Feedback.entityManager() {
        EntityManager em = new Feedback().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    @Transactional
    public static long Feedback.countFeedbacks() {
        return ((Number) entityManager().createQuery("select count(o) from Feedback o").getSingleResult()).longValue();
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<Feedback> Feedback.findAllFeedbacks() {
        return entityManager().createQuery("select o from Feedback o").getResultList();
    }
    
    @Transactional
    public static Feedback Feedback.findFeedback(Long id) {
        if (id == null) return null;
        Query query = entityManager().createQuery("select o from Feedback o where o.id = :id").setParameter("id",id);
        Feedback result = null;
        List results = query.getResultList();
        if (results.size() > 0) {
            result = (Feedback) results.get(0);
        }
        return result;
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<Feedback> Feedback.findFeedbackEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Feedback o").setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
